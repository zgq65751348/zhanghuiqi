#nginx限流方式
#1.控制速率
#2.控制并发连接数（采用漏桶算法）

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #   $binary_remote_addr  用户远程ip地址
    #  zone=myRateLimit:10m  缓存名称：myRateLimit，   空间为10MB
    #  rate 请求速率 每秒处理两个
    # burst  表示最多处理的数量
    limit_req_zone $binary_remote_addr zone=contentRateLimit:10m rate=2r/s;

    #根据ip地址限流
    limit_conn_zone  $binary_remote_addr zone=addr:1m;

    #存储个人请求Ip的限流容量
    limit_conn_zone $binary_remote_addr zone=perip:10m;

    #整个location对应请求的并发容量配置
    limit_conn_zone $server_name zone=perserver:10m;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #ip地址限流
        # location /请求路径 {
                #limit conn addr 2;  每个ip限制两次
                #proxy_pass http://106.13.16.73:80;  该请求转接地址
         #}

         #ip地址限流
                 # location /请求路径 {
                        #个人ip限流配置
                        #limit_conn perip 10;

                        #当前Location总鬓发量配置
                        #limit_conn perserver 10;
                         #proxy_pass http://106.13.16.73:80;  该请求转接地址
                  #}

       #速率限流
       # location /请求路径  {
             # root   html;
            #index  index.html index.htm;
            # limit_req_zone = contentRateLimit  burst =4  nodelay; 使用限流配置 最多处理4个请求
       # }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
